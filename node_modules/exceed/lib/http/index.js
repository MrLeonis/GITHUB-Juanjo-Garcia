'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var HttpAjax = require('./httpAjax');

var _require = require('./utils'),
    normalize = _require.normalize,
    serial = _require.serial,
    toQueryString = _require.toQueryString;

function httpAjax(o, fn) {
  return new HttpAjax(o, fn);
}

// collect up all form elements found from the passed argument elements all
// the way down to child elements; pass a '<form>' or form fields.
// called with 'this'=callback to use for serial() on each element
function eachFormElement() {
  var cb = this,
      e = void 0,
      i = void 0,
      serializeSubtags = function serializeSubtags(e, tags) {
    var i = void 0,
        j = void 0,
        fa = void 0;
    for (i = 0; i < tags.length; i++) {
      fa = e[byTag](tags[i]);
      for (j = 0; j < fa.length; j++) {
        serial(fa[j], cb);
      }
    }
  };

  for (i = 0; i < arguments.length; i++) {
    e = arguments[i];
    if (/input|select|textarea/i.test(e.tagName)) serial(e, cb);
    serializeSubtags(e, ['input', 'select', 'textarea']);
  }
}

// standard query string style serialization
function serializeQueryString() {
  return httpAjax.toQueryString(httpAjax.serializeArray.apply(null, arguments));
}

// { 'name': 'value', ... } style serialization
function serializeHash() {
  var hash = {};
  eachFormElement.apply(function (name, value) {
    if (name in hash) {
      hash[name] && !Array.isArray(hash[name]) && (hash[name] = [hash[name]]);
      hash[name].push(value);
    } else hash[name] = value;
  }, arguments);
  return hash;
}

// [ { name: 'name', value: 'value' }, ... ] style serialization
httpAjax.serializeArray = function () {
  var arr = [];
  eachFormElement.apply(function (name, value) {
    arr.push({ name: name, value: value });
  }, arguments);
  return arr;
};

httpAjax.serialize = function () {
  if (arguments.length === 0) return '';
  var opt = void 0,
      fn = void 0,
      args = Array.prototype.slice.call(arguments, 0);

  opt = args.pop();
  opt && opt.nodeType && args.push(opt) && (opt = null);
  opt && (opt = opt.type);

  if (opt == 'map') fn = serializeHash;else if (opt == 'array') fn = httpAjax.serializeArray;else fn = serializeQueryString;

  return fn.apply(undefined, _toConsumableArray(args));
};

httpAjax.toQueryString = toQueryString;

module.exports = httpAjax;