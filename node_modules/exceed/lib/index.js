/**
 * Copyright(c) Alibaba Group Holding Limited.
 *
 * Authors:
 *   笑斌 <xinlei.sxl@alibaba-inc.com>
 */

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Mustache = require('mustache');
var HttpAjax = require('./http/index');

var csrfReader = require('./interceptors/csrf');

var Exceed = function () {
  /**
   * 默认配置
   * @param config.csrf CSRF设置，默认token设置为_tb_token_
   * @param config.ENV 环境设置
   */
  function Exceed(config) {
    _classCallCheck(this, Exceed);

    config = config || {};
    var finalConfig = config;

    // 环境识别
    if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && window._ENV) {
      finalConfig.ENV = window._ENV;
    }
    if (finalConfig.env && !finalConfig.ENV) {
      finalConfig.ENV = finalConfig.env;
    }
    // 未填环境时默认为production
    if (!finalConfig.ENV) {
      finalConfig.ENV = 'production';
    }

    // urlencode
    if (!finalConfig.urlencode) {
      finalConfig.urlencode = false;
    }

    // 组合为最终配置
    this.config = finalConfig;

    // 拦截器
    this.interceptors = {
      request: [csrfReader],
      response: {
        success: [],
        error: [],
        complete: []
      }
    };
    this.apimap = {};
  }

  /**
   * 导入APIMAP
   * @param apimap
   */


  _createClass(Exceed, [{
    key: 'use',
    value: function use(apimap) {
      if (apimap instanceof Array) {
        this.apimap = apimap;
      } else {
        console && console.warn && console.warn('can not found ENV:' + this.config.ENV + ' in your apimap');
      }
    }

    /**
     * 请求用函数
     * @param param.api 请求的接口id
     * @param param.params 用于替换接口中的模板参数
     * @param param.data 用于传递参数
     * @returns {*}
     */

  }, {
    key: 'fetch',
    value: function (_fetch) {
      function fetch(_x) {
        return _fetch.apply(this, arguments);
      }

      fetch.toString = function () {
        return _fetch.toString();
      };

      return fetch;
    }(function (param) {
      var _this = this;

      var requestParams = void 0;
      if (typeof param === 'string') {
        param = {
          api: param
        };
      }

      this.apimap.forEach(function (item) {
        if (item.id === param.api) {
          // 如果存在 params 字段则调用胡子插件进行字符串模板渲染
          if (param.params) {
            var url = item.urls[_this.config.ENV];
            if (_this.config.urlencode) {
              for (var paramItem in param.params) {
                if (typeof param.params[paramItem] === 'string' || typeof param.params[paramItem] === 'number') {
                  param.params[paramItem] = encodeURIComponent(param.params[paramItem]);
                }
              }
              item.url = Mustache.render(url, param.params);
            } else {
              item.url = Mustache.render(url, param.params);
            }
          } else {
            item.url = item.urls[_this.config.ENV];
          }

          requestParams = item;
          if (Array.isArray(_this.interceptors.response.success)) {
            requestParams.success = _this.interceptors.response.success.slice();
          } else {
            console.warn('interceptors can only receive interceptor Array!');
          }

          if (Array.isArray(_this.interceptors.response.error)) {
            requestParams.error = _this.interceptors.response.error.slice();
          } else {
            console.warn('interceptors can only receive interceptor Array!');
          }

          if (Array.isArray(_this.interceptors.response.complete)) {
            requestParams.complete = _this.interceptors.response.complete.slice();
          } else {
            console.warn('interceptors can only receive interceptor Array!');
          }
        }
      });

      if (!requestParams) {
        console && console.warn && console.warn('can not found API:' + param.api + ' in your current environment');
      }

      // 添加通用参数
      if (!requestParams.url) {
        console.warn('API url is null, please check the APIMAP');
      }

      if (requestParams.url.indexOf('?') === -1) {
        requestParams.url += '?';
      } else {
        requestParams.url += '&';
      }

      requestParams.url += '_input_charset=utf-8';

      // 将访问数据添加进requestParams中
      if (param.data) {
        requestParams.data = param.data;
      }

      this.interceptors.request.forEach(function (requestInterceptor) {
        requestInterceptor(requestParams, _this.config);
      });

      // 请求处理部分
      if (!requestParams.method) {
        return HttpAjax(requestParams);
      }

      if (requestParams.method === 'file' || requestParams.method === 'FILE') {
        var postBody = new FormData();
        postBody.append('file', param.file);

        // 如果有传上来的data则包裹在formdata中
        if (requestParams.data) {
          for (var postDataItem in requestParams.data) {
            postBody.append(postDataItem.toString(), requestParams.data[postDataItem]);
          }
        }

        return fetch(requestParams.url, {
          method: 'POST',
          mode: 'same-origin',
          credentials: 'same-origin',
          body: postBody
        }).then(function (res) {
          if (res.ok) {
            return res.json();
          }
          return Promise.reject(res);
        });
      }
      if (requestParams.contentType === 'application/json') {
        // 兼容，仅当请求contentType为application/json同时传输的参数不为string时进入
        if (_typeof(requestParams.data) === 'object') {
          requestParams.data = JSON.stringify(requestParams.data);
        }
      }
      return HttpAjax(requestParams);
    })
  }]);

  return Exceed;
}();

module.exports = Exceed;