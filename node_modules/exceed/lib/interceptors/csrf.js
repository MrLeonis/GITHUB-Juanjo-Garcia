'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Copyright(c) Alibaba Group Holding Limited.
 *
 * Authors:
 *   笑斌 <xinlei.sxl@alibaba-inc.com>
 */
var cookie = require('cookie');

module.exports = function (request, config) {
  var finalConfig = {};

  // CSRF配置生成
  var csrfConfig = {
    token: '_tb_token_'
  };

  if (typeof config.csrf === 'string' && config.csrf === true) {
    finalConfig.csrf = csrfConfig;
  } else if (typeof config.csrf === 'string' && config.csrf === false) {
    finalConfig.csrf = false;
  } else if (_typeof(config.csrf) === 'object' && !!config.csrf.token) {
    finalConfig.csrf = _extends(csrfConfig, config.csrf);
  } else {
    finalConfig.csrf = false;
  }

  // 获取csrf标识
  if (finalConfig.csrf) {
    request.csrf = getCsrfToken();
    request.url += '&' + finalConfig.csrf.token + '=' + request.csrf;
  }

  /**
   * 读取csrfToken
   * @returns {*}
   */
  function getCsrfToken() {
    var token = null;
    // 从cookie中读取相应值
    var cookies = cookie.parse(document.cookie);
    token = cookies[config.csrf.token];
    if (token) {
      return token;
    }
    return false;
  }
};