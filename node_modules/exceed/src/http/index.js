'use strict';

const HttpAjax = require('./httpAjax');
const { normalize, serial, toQueryString } = require('./utils');

function httpAjax(o, fn) {
  return new HttpAjax(o, fn);
}

// collect up all form elements found from the passed argument elements all
// the way down to child elements; pass a '<form>' or form fields.
// called with 'this'=callback to use for serial() on each element
function eachFormElement() {
  let cb = this,
    e,
    i,
    serializeSubtags = function (e, tags) {
      let i,
        j,
        fa;
      for (i = 0; i < tags.length; i++) {
        fa = e[byTag](tags[i]);
        for (j = 0; j < fa.length; j++) serial(fa[j], cb);
      }
    };

  for (i = 0; i < arguments.length; i++) {
    e = arguments[i];
    if (/input|select|textarea/i.test(e.tagName)) serial(e, cb);
    serializeSubtags(e, ['input', 'select', 'textarea']);
  }
}

// standard query string style serialization
function serializeQueryString() {
  return httpAjax.toQueryString(httpAjax.serializeArray.apply(null, arguments));
}

// { 'name': 'value', ... } style serialization
function serializeHash() {
  const hash = {};
  eachFormElement.apply((name, value) => {
    if (name in hash) {
      hash[name] && !Array.isArray(hash[name]) && (hash[name] = [hash[name]]);
      hash[name].push(value);
    } else hash[name] = value;
  }, arguments);
  return hash;
}

// [ { name: 'name', value: 'value' }, ... ] style serialization
httpAjax.serializeArray = function () {
  const arr = [];
  eachFormElement.apply((name, value) => {
    arr.push({ name, value });
  }, arguments);
  return arr;
};

httpAjax.serialize = function () {
  if (arguments.length === 0) return '';
  let opt,
    fn,
    args = Array.prototype.slice.call(arguments, 0);

  opt = args.pop();
  opt && opt.nodeType && args.push(opt) && (opt = null);
  opt && (opt = opt.type);

  if (opt == 'map') fn = serializeHash;
  else if (opt == 'array') fn = httpAjax.serializeArray;
  else fn = serializeQueryString;

  return fn(...args);
};

httpAjax.toQueryString = toQueryString;

module.exports = httpAjax;
